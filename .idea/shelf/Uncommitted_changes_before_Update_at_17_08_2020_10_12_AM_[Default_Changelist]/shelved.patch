Index: src/main/java/model/loader/AirportParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.loader;\r\n\r\nimport model.data.Airport;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\n/**\r\n * The sub-class Parser for airport. AirportParser class receives a list of airport data, validates\r\n * each of the data line and create airport object. Then put the object into a hashSet for return\r\n * value.\r\n *\r\n * @author Hayley Krippner\r\n * @version 2.1\r\n * @since 2020-08-11\r\n */\r\npublic class AirportParser extends Parser {\r\n    //Processed airport data\r\n    private final Set<Airport> airports = new HashSet<>();\r\n    //Alphabetical name to represent line index\r\n    private final int airportID = 0, name = 1, city = 2, country = 3, IATA = 4, ICAO = 5, latitude = 6, longtitude = 7,\r\n            altitude = 8, timezone = 9, DST = 10, dataBaseTimeZone = 11;\r\n\r\n    /**\r\n     * Constructor of AirportParser, it will start dataParse method as well.\r\n     * @param dataFile is the list contains one line of datafile per element.\r\n     */\r\n    public AirportParser(List<String> dataFile) {\r\n        super(dataFile);\r\n\r\n        /**\r\n         * AirportParser Error code:\r\n         * 100: not enough parameters\r\n         * 101: airport id exists\r\n         * 102: invalid id number\r\n         * 103: invalid airport name\r\n         * 104: invalid airport city\r\n         * 105: invalid airport country\r\n         * 106: invalid airport IATA code\r\n         * 107: invalid airport ICAO code\r\n         * 108: invalid latitude\r\n         * 109: invalid lontitude\r\n         * 110: invalid altitude\r\n         * 111: invalid timezone\r\n         * 112: invalid DST\r\n         * 113: invalid database timezone\r\n         * 114: invalid unknown error\r\n         * 115: number of failed insertions\r\n         *\r\n         * 116: invalid alias\r\n         * 117: invalid callsign\r\n         * 118: invalid activestatus\r\n         */\r\n        errorCollectionInitializer(16);\r\n        dataParser();\r\n    }\r\n\r\n    /**\r\n     * Data parser to convert airport data from list into airport objects and add to HashSet. will also call validater\r\n     * to verify each airport data.\r\n     */\r\n    @Override\r\n    protected void dataParser(){\r\n\r\n        for (String dataLine: dataFile){\r\n            String[] line= dataLine.replaceAll(\"\\\"\",\"\").split(\",\");\r\n            if (validater(line)){\r\n                try{\r\n                    Airport airport = new Airport(Integer.parseInt(line[airportID]), line[name], line[city], line[country], line[IATA],\r\n                            line[ICAO], Float.parseFloat(line[latitude]), Float.parseFloat(line[longtitude]), Integer.parseInt(line[altitude]),\r\n                            Float.parseFloat(line[timezone]), line[DST], line[dataBaseTimeZone]);\r\n                    airports.add(airport);\r\n                } catch(Exception e) {\r\n                    errorCounter(114);\r\n                }\r\n            } else {\r\n                errorCounter(115);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates the data in one line is valid or not.\r\n     * @param line String list contains 11 data for airport attributes.\r\n     * @return true if the data line is valid, false if the data line is not expected.\r\n     */\r\n    @Override\r\n    protected boolean validater(String[] line) {\r\n        boolean isValid = true;\r\n        if (line.length != 12){\r\n            errorCounter(100);\r\n            isValid = false;\r\n        }\r\n\r\n        if (!isIdValid(line[airportID])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isNameValid(line[name])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isCityValid(line[city])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isCountryValid(line[country])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isIATAValid(line[IATA])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isICAOValid(line[ICAO])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isLatValid(line[latitude])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isLonValid(line[longtitude])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isAltValid(line[altitude])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isTZValid(line[timezone])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isDSTValid(line[DST])){\r\n            isValid = false;\r\n        }\r\n\r\n        if(!isDBTZValid(line[dataBaseTimeZone])){\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * Check if id is valid.\r\n     * @param id airport id as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isIdValid(String id){\r\n        // airport ID Duplication check\r\n        for(Airport airport: airports){\r\n            try{\r\n                if(airport.getAirportID() == Integer.parseInt(id)){\r\n                    errorCounter(101);\r\n                    return false;\r\n                }\r\n            } catch (Exception e){\r\n                    errorCounter(102);\r\n                    return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if name is valid.\r\n     * @param name airport name as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isNameValid(String name){\r\n        if(!name.matches(\"[a-zA-Z ]+\")){\r\n            errorCounter(103);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if city is valid.\r\n     * @param city airport city as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isCityValid(String city){\r\n        if(!city.matches(\"[a-zA-Z ]+\")){\r\n            errorCounter(104);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if country is valid.\r\n     * @param country airport country as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isCountryValid(String country){\r\n        //ISO 3166-1 codes not implemented\r\n        if(!country.matches(\"[a-zA-Z ]+\")){\r\n            errorCounter(105);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if IATA is valid.\r\n     * @param IATA airport IATA as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isIATAValid(String IATA){\r\n        //airport IATA check\r\n        if(!IATA.equalsIgnoreCase(\"null\") && !IATA.equalsIgnoreCase(\"unknown\")){\r\n            if(!IATA.matches(\"[a-zA-Z]+\" ) || IATA.length() != 3 ){\r\n                errorCounter(106);\r\n                return false;\r\n                }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if ICAO is valid.\r\n     * @param ICAO airport ICAO as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isICAOValid(String ICAO){\r\n        //airport ICAO check\r\n        if(!ICAO.equalsIgnoreCase(\"null\") && !ICAO.equalsIgnoreCase(\"unknown\")){\r\n            if(!ICAO.matches(\"[a-zA-Z]+\" ) || ICAO.length() != 4 ){\r\n                errorCounter(107);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if latitude is valid.\r\n     * @param lat airport latitude as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isLatValid(String lat){\r\n        //airport Latitude check\r\n        try{\r\n            Float.parseFloat(lat);\r\n            return true;\r\n        } catch (Exception e){\r\n            errorCounter(108);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if longitude is valid.\r\n     * @param lon airport longitude as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isLonValid(String lon){\r\n        try{\r\n            Float.parseFloat(lon);\r\n            return true;\r\n        } catch (Exception e){\r\n            errorCounter(109);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if altitude is valid.\r\n     * @param alt airport altitude as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isAltValid(String alt){\r\n        try{\r\n            Integer.parseInt(alt);\r\n            return true;\r\n        } catch (Exception e){\r\n            errorCounter(110);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if timeZone is valid.\r\n     * @param timeZone airport timeZone as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isTZValid(String timeZone){\r\n        try{\r\n\r\n            if(-12 < Float.parseFloat(timeZone) && Float.parseFloat(timeZone) < 12){\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (Exception e){\r\n            errorCounter(111);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if DST is valid.\r\n     * @param DST airport DST as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isDSTValid(String DST){\r\n        if(!DST.matches(\"[EASOZNU]+\" ) || DST.length() != 1 ){\r\n            errorCounter(112);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if DBTZ is valid.\r\n     * @param DBTZ airport DBTZ as a string.\r\n     * @return true if valid, false if invalid.\r\n     */\r\n    private boolean isDBTZValid(String DBTZ){\r\n        if(!DBTZ.matches(\"[a-zA-Z/a-zA-Z_]+\" )){\r\n            errorCounter(113);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Getter for airports\r\n     * @return A hashset contains all airport objects.\r\n     */\r\n    public Set<Airport> getAirports() {\r\n        return airports;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/model/loader/AirportParser.java	(revision 3a9e77e1ed5128765411644e78ea13b0fcd0e111)
+++ src/main/java/model/loader/AirportParser.java	(date 1597296122000)
@@ -335,4 +335,5 @@
         return airports;
     }
 
+
 }
Index: seng202_project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_11\">\r\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\r\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: junit:junit:4.12\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.code.gson:gson:2.8.6\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: junit:junit:4.12\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest-core:1.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.guava:guava:29.0-jre\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.guava:failureaccess:1.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.code.findbugs:jsr305:3.0.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.checkerframework:checker-qual:2.11.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.errorprone:error_prone_annotations:2.3.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.j2objc:j2objc-annotations:1.3\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- seng202_project.iml	(revision 3a9e77e1ed5128765411644e78ea13b0fcd0e111)
+++ seng202_project.iml	(date 1597295627000)
@@ -10,7 +10,6 @@
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.12" level="project" />
     <orderEntry type="library" name="Maven: com.google.code.gson:gson:2.8.6" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.12" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
