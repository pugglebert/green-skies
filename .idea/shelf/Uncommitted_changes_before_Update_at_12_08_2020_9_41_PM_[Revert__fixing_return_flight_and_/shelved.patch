Index: src/main/java/model/data/Flight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.data;\r\n\r\n/**\r\n * The Flight class for containing all data for one unique flight.\r\n * @author Hayley Krippner\r\n * @version 1.1\r\n * @since 2020-08-09\r\n */\r\npublic class Flight {\r\n    private final String flightID;\r\n    private final String type;\r\n    private final String airportsVia;\r\n    private final int altitude;\r\n    private final int position;\r\n    private final int distance;\r\n    private final String flightName;\r\n\r\n    /**\r\n     * The Flight constructor.\r\n     */\r\n    public Flight(String flightID, String type, String airportsVia, int altitude, int position, int distance,\r\n                  String flightName) {\r\n        this.flightID = flightID;\r\n        this.type = type;\r\n        this.airportsVia = airportsVia;\r\n        this.altitude = altitude;\r\n        this.position = position;\r\n        this.distance = distance;\r\n        this.flightName = flightName;\r\n    }\r\n\r\n    /**\r\n     * Getter for the Flight's ID.\r\n     * @return flightID.\r\n     */\r\n    public String getFlightID(){\r\n        return flightID;\r\n    }\r\n\r\n    /**\r\n     * Getter for the type of the Fight.\r\n     * @return type.\r\n     */\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Getter for the airports the Fight goes via.\r\n     * @return airportsVia.\r\n     */\r\n    public String getAirportsVia() {\r\n        return airportsVia;\r\n    }\r\n\r\n    /**\r\n     * Getter for the altitude of the Fight.\r\n     * @return altitude.\r\n     */\r\n    public int getAltitude() {\r\n        return altitude;\r\n    }\r\n\r\n    /**\r\n     * Getter for the position of the Fight.\r\n     * @return position.\r\n     */\r\n    public int getPosition() {\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Getter for the distance travelled during the Fight.\r\n     * @return distance.\r\n     */\r\n    public int getDistance() {\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * Getter for the name of the Fight.\r\n     * @return flightName.\r\n     */\r\n    public String getFlightName() {\r\n        return flightName;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/model/data/Flight.java	(revision 3c6a51c8ac3bd9e091d9a538b67f1d688eb7426c)
+++ src/main/java/model/data/Flight.java	(date 1597155061275)
@@ -33,7 +33,7 @@
      * Getter for the Flight's ID.
      * @return flightID.
      */
-    public String getFlightID(){
+    public int getFlightID(){
         return flightID;
     }
 
@@ -57,7 +57,7 @@
      * Getter for the altitude of the Fight.
      * @return altitude.
      */
-    public int getAltitude() {
+    public String getAltitude() {
         return altitude;
     }
 
@@ -65,7 +65,7 @@
      * Getter for the position of the Fight.
      * @return position.
      */
-    public int getPosition() {
+    public String getPosition() {
         return position;
     }
 
@@ -73,7 +73,7 @@
      * Getter for the distance travelled during the Fight.
      * @return distance.
      */
-    public int getDistance() {
+    public String getDistance() {
         return distance;
     }
 
Index: src/main/java/model/data/Route.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.data;\r\n\r\n/**\r\n * The Route class for containing all data for one unique flight route.\r\n * @author Hayley Krippner\r\n * @version 1.1\r\n * @since 2020-08-11\r\n */\r\npublic class Route {\r\n    private final String airlineName;\r\n    private final int airlineID;\r\n    private final String sourceAirport;\r\n    private final int sourceAirportID;\r\n    private final String destinationAirport;\r\n    private final int destinationAirportID;\r\n    private final String codeShare;\r\n    private final int numOfStops;\r\n    private final int equipment;\r\n\r\n    /**\r\n     * The Route constructor.\r\n     */\r\n    public Route(String airlineName, int airlineID, String sourceAirport, int sourceAirportID, String destinationAirport,\r\n                   int destinationAirportID, String codeShare, int numOfStops, int equipment) {\r\n        this.airlineName = airlineName;\r\n        this.airlineID = airlineID;\r\n        this.sourceAirport = sourceAirport;\r\n        this.sourceAirportID = sourceAirportID;\r\n        this.destinationAirport = destinationAirport;\r\n        this.destinationAirportID = destinationAirportID;\r\n        this.codeShare = codeShare;\r\n        this.numOfStops = numOfStops;\r\n        this.equipment = equipment;\r\n    }\r\n\r\n    /**\r\n     * Getter for the name of the airline of that is used during the Flight.\r\n     * @return airlineID.\r\n     */\r\n    public String getAirlineName(){\r\n        return airlineName;\r\n    }\r\n\r\n    /**\r\n     * Getter for the ID of the airline of that is used during the Flight.\r\n     * @return airlineID.\r\n     */\r\n    public int getAirlineID(){\r\n        return airlineID;\r\n    }\r\n\r\n    /**\r\n     * Getter for the name of the source airport of the Flight.\r\n     * @return sourceAirport.\r\n     */\r\n    public String getSourceAirport(){\r\n        return sourceAirport;\r\n    }\r\n\r\n    /**\r\n     * Getter for the ID of the source airport of the Flight.\r\n     * @return sourceAirportID.\r\n     */\r\n    public int getSourceAirportID(){\r\n        return sourceAirportID;\r\n    }\r\n\r\n    /**\r\n     * Getter for the name of the destination airport of the Flight.\r\n     * @return destinationAirport.\r\n     */\r\n    public String getDestinationAirport(){\r\n        return destinationAirport;\r\n    }\r\n\r\n    /**\r\n     * Getter for the ID of the destination airport of the Flight.\r\n     * @return destinationAirportID.\r\n     */\r\n    public int getDestinationAirportID(){\r\n        return destinationAirportID;\r\n    }\r\n\r\n    /**\r\n     * Getter for the codeShare for the Flight.\r\n     * @return codeShare.\r\n     */\r\n    public String getCodeShare(){\r\n        return codeShare;\r\n    }\r\n\r\n    /**\r\n     * Getter for the number of stops the Flight has.\r\n     * @return numOfStops.\r\n     */\r\n    public int getNumOfStops(){\r\n        return numOfStops;\r\n    }\r\n\r\n    /**\r\n     * Getter for the equipment used during the Flight.\r\n     * @return equipment.\r\n     */\r\n    public int getEquipment(){\r\n        return equipment;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/model/data/Route.java	(revision 3c6a51c8ac3bd9e091d9a538b67f1d688eb7426c)
+++ src/main/java/model/data/Route.java	(date 1597155061276)
@@ -37,7 +37,7 @@
      * Getter for the name of the airline of that is used during the Flight.
      * @return airlineID.
      */
-    public String getAirlineName(){
+    public int getAirlineName(){
         return airlineName;
     }
 
@@ -53,7 +53,7 @@
      * Getter for the name of the source airport of the Flight.
      * @return sourceAirport.
      */
-    public String getSourceAirport(){
+    public int getSourceAirport(){
         return sourceAirport;
     }
 
@@ -69,7 +69,7 @@
      * Getter for the name of the destination airport of the Flight.
      * @return destinationAirport.
      */
-    public String getDestinationAirport(){
+    public int getDestinationAirport(){
         return destinationAirport;
     }
 
@@ -85,7 +85,7 @@
      * Getter for the codeShare for the Flight.
      * @return codeShare.
      */
-    public String getCodeShare(){
+    public int getCodeShare(){
         return codeShare;
     }
 
